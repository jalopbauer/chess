@startuml Chess

class Position
Position : int x
Position : int y
' Methods
Position : Position(x,y)

class Move
Move : Position initialPosition, finalPosition
' Methods
Move : Move(Position initialPosition, Position finalPosition)
' Relationships
Move --o Position
Move --o Position

class MoveValidatorData
MoveValidatorData : Move move
MoveValidatorData : Board board
MoveValidatorData : List<Turn> turns
' Methods
MoveValidatorData : MoveValidatorData(Move move, Board board, List<Turn> turns)
' Relationships
MoveValidatorData --o Move
MoveValidatorData --o Board
MoveValidatorData --o "n" Turn

class WinConditionData
WinConditionData : Board board
WinConditionData : List<Turn> turns
' Methods
WinConditionData : WinConditionData(Board board, List<Turn> turns)
' Relationships
WinConditionData --o Board
WinConditionData --o "n" Turn

class Turn
Turn : Move performedMove
Turn : Optional<Piece> eatenPiece
Turn : Player player
' Methods
Turn : Turn(Move performedMove, Optional<Piece> eatenPiece, Player player)
' Relationships
Turn --o Move
Turn --o "0,1" Piece
Turn --o Player

class Player
Player : PieceColor playerColor
Player : String name
' Methods
Player : Player(PieceColor playerColor, String name)
' Relationships
Player --o PieceColor

class PieceColor
PieceColor : Color color
PieceColor : String pieceName

class Piece
Piece : String name
Piece : PieceColor pieceColor
' Relationships
Piece --o PieceColor

' No me gusta, cambiar
class MoveResult
MoveResult : Optional<Optional<Piece>> moveResult
MoveResult : isInvalid():boolean
MoveResult : wasEaten():boolean
MoveResult : getPiece():Piece

interface MoveValidator
MoveValidator : validate(MoveValidatorData moveValidtorData):boolean
' Relationships
MoveValidator ..> MoveValidatorData

' Piece Handler
interface Board
Board : makeMove(Position position): MoveResult
' Relationships
Board ..> MoveResult

interface WinCondition
WinCondition : check(WinConditionData winConditionData):boolean
' Relationships
WinCondition ..> WinConditionData

interface PieceMoveValidatorMapper
PieceMoveValidatorMapper : getPieceMoveValidator(Piece piece): MoveValidator
' Relationships
PieceMoveValidatorMapper ..> Piece
PieceMoveValidatorMapper ..> MoveValidator

interface TurnHandler
TurnHandler : addTurn(Turn turn)
TurnHandler : getTurns():List<Turn>
' Relationships
TurnHandler ..> Turn
TurnHandler ..> "0...n" Turn

interface GameFlow
GameFlow : next(Display display)
' Las win conditions siempre van a usar WinConditionData y nunca va a cambiar. Pasar un puntero pero que no lo pueda editar maybe mejor?
' MoveValidatorData los mismo ue arriba peeero el move si cambia entonces eso si pasar por el metodo?
@enduml
